package edu.duke.ys303.battleship;

import java.util.Random;
import java.io.BufferedReader;
import java.io.EOFException;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.function.Function;

public class ComputerTextPlayer extends TextPlayer {
  /** Random object to generate numbers */
  private Random rdm;

  public ComputerTextPlayer(String name, Board<Character> theBoard, BufferedReader inputReader, PrintStream out,
      V2ShipFactory factory) {
    super(name, theBoard, inputReader, out, factory);
    rdm = new Random();
  }

  public Placement readPlacement() {
    int row = rdm.nextInt(theBoard.getHeight());
    int col = rdm.nextInt(theBoard.getWidth());
    String oriChoice = "VHURDL";
    char ori = oriChoice.charAt(rdm.nextInt(6));
    return new Placement(new Coordinate(row, col), ori);
  }

  public Coordinate readCoordinate() {
    int row = rdm.nextInt(theBoard.getHeight());
    int col = rdm.nextInt(theBoard.getWidth());
    Coordinate c = new Coordinate(row, col);
    if (c.getRow() > theBoard.getHeight() || c.getColumn() > theBoard.getWidth()) {
      throw new IllegalArgumentException("Coordinate goes off the board!");
    }
    return c;
  }

  public void doOnePlacement(String shipName, Function<Placement, Ship<Character>> createFn) {
    try {
      Placement p = readPlacement();
      Ship<Character> s = createFn.apply(p);
      String str = theBoard.tryAddShip(s);
    } catch (IllegalArgumentException e) {
      doOnePlacement(shipName, createFn);
    }
  }

  public void doPlacementPhase() {
    for (String shipName : shipsToPlaces) {
      doOnePlacement(shipName, shipCreationFns.get(shipName));
    }
  }

  public void playOneFire(Board<Character> enemyBoard) {
    Coordinate c = readCoordinate();
    Ship<Character> s = enemyBoard.fireAt(c);
    if (s == null) {
      out.println("Player " + name + " missed!");
    } else {
      out.println("Player " + name + " hit your " + s.getName() + " at " + c.toString() + "!");
    }
  }

  public void playOneMove() {
    Coordinate c = readCoordinate();
    Ship<Character> s = theBoard.findShip(c);
    if (s == null) {
      throw new IllegalArgumentException("This coordinate is not part of any ship on the board.");
    }
    moveShip(s);
  }

  public void moveShip(Ship<Character> oldShip) throws IOException {
    Placement p = readPlacement();
    Function<Placement, Ship<Character>> createFn = shipCreationFns.get(oldShip.getName());
    Ship<Character> newShip = createFn.apply(p);
    newShip.transferHit(oldShip);
    String str = theBoard.tryAddShip(newShip);
    if (str == null) {
      theBoard.removeShip(oldShip);
      updateMoveTimes();
      out.println("Player " + name + " used a special action!");
    } else {
      throw new IllegalArgumentException("This placement is invalid");
    }
  }

  public void playOneTurn(Board<Character> enemyBoard, BoardTextView enemyView, String myHeader, String enemyHeader)
      throws IOException {
    try {
      if (getMoveTimes() == 0 && getScanTimes() == 0) {
        playOneFire(enemyBoard);
      } else {
        readChoice(enemyBoard, enemyView, myHeader, enemyHeader);
      }
    } catch (IllegalArgumentException e) {
      playOneTurn(enemyBoard, enemyView, myHeader, enemyHeader);
    }
  }

  public void playOneScan() {  
      out.println("Player " + name + " used a special action!");
      updateScanTimes();
  }
}
