package edu.duke.ys303.battleship;

import java.util.HashSet;

/**
 * This class handles construction of a BattleShip in version 2.
 *
 * @param T character
 */
public class BattleShip<T> extends BasicShip<T> {
  /** Name of this Ship. */
  private final String name;
  

  /**
   * Name getter.
   *
   * @return String name.
   */
  public String getName() {
    return name;
  }

  /**
   *Convenience constructor for BattleShip.
   *
   *@param String name of this ship.
   *@param Placement for how to place this ship.
   *@param T data for how to display this ship.
   *@param T onHit indicates for how to display this ship when it was hit.
   */
  public BattleShip(String name, Placement p, T data, T onHit) {
    this(name, p, new SimpleShipDisplayInfo<T>(data, onHit), new SimpleShipDisplayInfo<T>(null, data));
  }

  /**
   *Constructor for BattleShip. Pass parameters to parent class via super() call.
   *
   *@param
  public BattleShip(String name, Placement p, ShipDisplayInfo<T> s1, ShipDisplayInfo<T> s2) {
    super(getCoords(p), s1, s2);
    this.name = name;
  }

  static HashSet<Coordinate> getCoords(Placement p) {
    Character o = p.getOrientation();
    Coordinate c = p.getWhere();
    if (o == 'U') {
      return makeCoordsUp(c);
    } else if (o == 'R') {
      return makeCoordsRight(c);
    } else if (o == 'D') {
      return makeCoordsDown(c);
    } else {
      return makeCoordsLeft(c);
    }
  }

  static HashSet<Coordinate> makeCoordsUp(Coordinate upperLeft) {
    HashSet<Coordinate> coords = new HashSet<Coordinate>();
    coords.add(upperLeft);
    int r = upperLeft.getRow();
    int c = upperLeft.getColumn();
    for (int i = c - 1; i <= c + 1; i++) {
      Coordinate cdt = new Coordinate(r + 1, i);
      coords.add(cdt);
    }
    return coords;
  }

  static HashSet<Coordinate> makeCoordsRight(Coordinate upperLeft) {
    HashSet<Coordinate> coords = new HashSet<Coordinate>();
    int r = upperLeft.getRow();
    int c = upperLeft.getColumn();
    coords.add(new Coordinate(r + 1, c + 1));
    for (int i = r; i <= r + 2; i++) {
      Coordinate cdt = new Coordinate(i, c);
      coords.add(cdt);
    }
    return coords;
  }

  static HashSet<Coordinate> makeCoordsDown(Coordinate upperLeft) {
    HashSet<Coordinate> coords = new HashSet<Coordinate>();
    int r = upperLeft.getRow();
    int c = upperLeft.getColumn();
    coords.add(new Coordinate(r + 1, c + 1));
    for (int i = c; i <= c + 2; i++) {
      Coordinate cdt = new Coordinate(r, i);
      coords.add(cdt);
    }
    return coords;
  }

  static HashSet<Coordinate> makeCoordsLeft(Coordinate upperLeft) {
    HashSet<Coordinate> coords = new HashSet<Coordinate>();
    int r = upperLeft.getRow();
    int c = upperLeft.getColumn();
    coords.add(new Coordinate(r + 1, c - 1));
    for (int i = r; i <= r + 2; i++) {
      Coordinate cdt = new Coordinate(i, c);
      coords.add(cdt);
    }
    return coords;
  }
}
