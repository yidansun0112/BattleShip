/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ys303.battleship;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;

/**
 * This class handles the main function of the whole battleship app.
 */
public class App {
  /** TextPlayer A */
  TextPlayer player1;
  /** TextPlayer B */
  TextPlayer player2;

  /**
   * Constructor for App
   *
   * @param TextPlayer to initialize player1
   * @param TextPlayer to initialize player2
   */
  public App(TextPlayer p1, TextPlayer p2) {
    player1 = p1;
    player2 = p2;
  }

  /**
   * This method carries out the placement phase of the game. Player 1 puts 10
   * ships at first. Then player 2 puts.
   *
   * @throws EOFxception              when the input is empty.
   * @throws IllegalArgumentException when the placement is invalid.
   */
  public void doPlacementPhase() throws IOException {
    player1.doPlacementPhase();
    player2.doPlacementPhase();
  }

  /**
   * This method carries out the attacking phase of the game. Players alternate
   * turns starting with player 1. On a turn a player chooses and carries out an
   * action. The phase ends when one player has lost at which point this method
   * declares the winner by printing a message.
   *
   * @throws EOFxception              if get empty input.
   * @throws IllegalArgumentException if get invalid input.
   */
  public void doAttackingPhase() throws IOException {
    TextPlayer currentPlayer = player1;
    TextPlayer nextPlayer = player2;
    while (!currentPlayer.isLose()) {
      currentPlayer.playOneTurn(nextPlayer.theBoard, nextPlayer.view, "Your ocean",
          "Player " + nextPlayer.name + "'s ocean");
      TextPlayer temp = currentPlayer;
      currentPlayer = nextPlayer;
      nextPlayer = temp;
    }
    // currentPlayer lost, other player won
    nextPlayer.declareWinner(); // lets abstract this out into a method.
  }

  /**
   * This method carries out whether the TextPlayer is Human or Computer.
   * 
   * Prints out choices for user to choose. H for human, C for computer.
   * 
   * @param String           of the TextPlayer
   * @param Board<Character> to play on
   * @param BufferedReader   for input
   * @param PrintStream      for output
   * @param V2ShipFactory    factory to build ships
   * @return TextPlayer
   */
  public static TextPlayer decideHumanComputer(String name, Board<Character> theBoard, BufferedReader inputReader,
      PrintStream out, V2ShipFactory factory) throws IOException {
    out.println("Do you want Player " + name + " a human player or to be played by the computer?");
    out.println("H for human, C for computer");
    out.println("Please make your choice:");
    try {
      String s = inputReader.readLine();
      if (s.length() != 1) {
        throw new IllegalArgumentException("Choice should only be one letter");
      }
      char c = s.charAt(0);
      if (c == 'H' || c == 'h') {
        return new HumanTextPlayer(name, theBoard, inputReader, System.out, factory);
      } else if (c == 'C' || c == 'c') {
        return new ComputerTextPlayer(name, theBoard, inputReader, System.out, factory);
      } else {
        throw new IllegalArgumentException("Choice should be H or C!");
      }
    } catch (IllegalArgumentException e) {
      out.println("Exception thrown:" + e);
      out.println("Please do that again!");
      return decideHumanComputer(name, theBoard, inputReader, out, factory);
    }
  }

  /**
   * Main of App
   *
   * Make a board, decide two players as human or computer. Ask two players to put
   * their ships. Then each player alternate to attack. Player 1 starts first.
   */
  public static void main(String[] args) throws IOException {
    Board<Character> b1 = new BattleShipBoard<Character>(10, 20, 'X');
    Board<Character> b2 = new BattleShipBoard<Character>(10, 20, 'X');
    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
    V2ShipFactory factory = new V2ShipFactory();
    TextPlayer p1 = decideHumanComputer("A", b1, input, System.out, factory);
    TextPlayer p2 = decideHumanComputer("B", b2, input, System.out, factory);
    App app = new App(p1, p2);
    app.doPlacementPhase();
    app.doAttackingPhase();
  }
}
